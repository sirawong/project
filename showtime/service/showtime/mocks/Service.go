// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	input "showtime/service/showtime/input"

	mock "github.com/stretchr/testify/mock"

	output "showtime/service/showtime/output"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx
func (_m *Service) All(ctx context.Context) ([]*output.ShowTime, error) {
	ret := _m.Called(ctx)

	var r0 []*output.ShowTime
	if rf, ok := ret.Get(0).(func(context.Context) []*output.ShowTime); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*output.ShowTime)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, in
func (_m *Service) Create(ctx context.Context, in *input.CreateInput) (*output.ShowTime, error) {
	ret := _m.Called(ctx, in)

	var r0 *output.ShowTime
	if rf, ok := ret.Get(0).(func(context.Context, *input.CreateInput) *output.ShowTime); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*output.ShowTime)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *input.CreateInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, in
func (_m *Service) Delete(ctx context.Context, in *input.DeleteInput) error {
	ret := _m.Called(ctx, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *input.DeleteInput) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: ctx, in
func (_m *Service) Read(ctx context.Context, in *input.ReadInput) (*output.ShowTime, error) {
	ret := _m.Called(ctx, in)

	var r0 *output.ShowTime
	if rf, ok := ret.Get(0).(func(context.Context, *input.ReadInput) *output.ShowTime); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*output.ShowTime)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *input.ReadInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in
func (_m *Service) Update(ctx context.Context, in *input.UpdateInput) (*output.ShowTime, error) {
	ret := _m.Called(ctx, in)

	var r0 *output.ShowTime
	if rf, ok := ret.Get(0).(func(context.Context, *input.UpdateInput) *output.ShowTime); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*output.ShowTime)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *input.UpdateInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
