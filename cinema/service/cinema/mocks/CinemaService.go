// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	entities "cinema/entities"
	context "context"

	input "cinema/service/cinema/input"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	output "cinema/service/cinema/output"
)

// CinemaService is an autogenerated mock type for the CinemaService type
type CinemaService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, in
func (_m *CinemaService) Create(ctx context.Context, in *input.CinemaInput) (*output.Cinema, error) {
	ret := _m.Called(ctx, in)

	var r0 *output.Cinema
	if rf, ok := ret.Get(0).(func(context.Context, *input.CinemaInput) *output.Cinema); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*output.Cinema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *input.CinemaInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, in
func (_m *CinemaService) Delete(ctx context.Context, in *input.CinemaInput) error {
	ret := _m.Called(ctx, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *input.CinemaInput) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, opt
func (_m *CinemaService) List(ctx context.Context, opt *entities.PageOption) ([]*output.Cinema, error) {
	ret := _m.Called(ctx, opt)

	var r0 []*output.Cinema
	if rf, ok := ret.Get(0).(func(context.Context, *entities.PageOption) []*output.Cinema); ok {
		r0 = rf(ctx, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*output.Cinema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entities.PageOption) error); ok {
		r1 = rf(ctx, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: ctx, in
func (_m *CinemaService) Read(ctx context.Context, in *input.CinemaInput) (*output.Cinema, error) {
	ret := _m.Called(ctx, in)

	var r0 *output.Cinema
	if rf, ok := ret.Get(0).(func(context.Context, *input.CinemaInput) *output.Cinema); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*output.Cinema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *input.CinemaInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in
func (_m *CinemaService) Update(ctx context.Context, in *input.CinemaInput) (*output.Cinema, error) {
	ret := _m.Called(ctx, in)

	var r0 *output.Cinema
	if rf, ok := ret.Get(0).(func(context.Context, *input.CinemaInput) *output.Cinema); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*output.Cinema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *input.CinemaInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: ctx, in, filename, file
func (_m *CinemaService) Upload(ctx context.Context, in *input.CinemaInput, filename string, file multipart.File) (*output.Cinema, error) {
	ret := _m.Called(ctx, in, filename, file)

	var r0 *output.Cinema
	if rf, ok := ret.Get(0).(func(context.Context, *input.CinemaInput, string, multipart.File) *output.Cinema); ok {
		r0 = rf(ctx, in, filename, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*output.Cinema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *input.CinemaInput, string, multipart.File) error); ok {
		r1 = rf(ctx, in, filename, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
