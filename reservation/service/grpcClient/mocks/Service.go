// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	authen "reservation/service/grpcClient/protobuf/auth"
	cinema "reservation/service/grpcClient/protobuf/cinema"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetCinema provides a mock function with given fields: in
func (_m *Service) GetCinema(in *cinema.CinemaRequest) (*cinema.CinemaReply, error) {
	ret := _m.Called(in)

	var r0 *cinema.CinemaReply
	if rf, ok := ret.Get(0).(func(*cinema.CinemaRequest) *cinema.CinemaReply); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cinema.CinemaReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cinema.CinemaRequest) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: data
func (_m *Service) VerifyToken(data *authen.TokenRequest) (*authen.TokenReply, error) {
	ret := _m.Called(data)

	var r0 *authen.TokenReply
	if rf, ok := ret.Get(0).(func(*authen.TokenRequest) *authen.TokenReply); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authen.TokenReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*authen.TokenRequest) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
