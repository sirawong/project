// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "reservation/entities"

	input "reservation/service/reservation/input"

	mock "github.com/stretchr/testify/mock"

	output "reservation/service/reservation/output"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, in
func (_m *Service) Create(ctx context.Context, in *input.ReservationInput) (*output.Reservation, string, error) {
	ret := _m.Called(ctx, in)

	var r0 *output.Reservation
	if rf, ok := ret.Get(0).(func(context.Context, *input.ReservationInput) *output.Reservation); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*output.Reservation)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, *input.ReservationInput) string); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *input.ReservationInput) error); ok {
		r2 = rf(ctx, in)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Delete provides a mock function with given fields: ctx, in
func (_m *Service) Delete(ctx context.Context, in *input.ReservationInput) error {
	ret := _m.Called(ctx, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *input.ReservationInput) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, opt
func (_m *Service) List(ctx context.Context, opt *entities.PageOption) ([]*output.Reservation, error) {
	ret := _m.Called(ctx, opt)

	var r0 []*output.Reservation
	if rf, ok := ret.Get(0).(func(context.Context, *entities.PageOption) []*output.Reservation); ok {
		r0 = rf(ctx, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*output.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entities.PageOption) error); ok {
		r1 = rf(ctx, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: ctx, in
func (_m *Service) Read(ctx context.Context, in *input.ReservationInput) (*output.Reservation, error) {
	ret := _m.Called(ctx, in)

	var r0 *output.Reservation
	if rf, ok := ret.Get(0).(func(context.Context, *input.ReservationInput) *output.Reservation); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*output.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *input.ReservationInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuggestSeats provides a mock function with given fields: ctx, in
func (_m *Service) SuggestSeats(ctx context.Context, in *input.ReservationInput) (*output.SuggestSeats, error) {
	ret := _m.Called(ctx, in)

	var r0 *output.SuggestSeats
	if rf, ok := ret.Get(0).(func(context.Context, *input.ReservationInput) *output.SuggestSeats); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*output.SuggestSeats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *input.ReservationInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in
func (_m *Service) Update(ctx context.Context, in *input.ReservationInput) (*output.Reservation, error) {
	ret := _m.Called(ctx, in)

	var r0 *output.Reservation
	if rf, ok := ret.Get(0).(func(context.Context, *input.ReservationInput) *output.Reservation); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*output.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *input.ReservationInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
