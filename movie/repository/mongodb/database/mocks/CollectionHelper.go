// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	database "movie/repository/mongodb/database"

	mock "github.com/stretchr/testify/mock"
)

// CollectionHelper is an autogenerated mock type for the CollectionHelper type
type CollectionHelper struct {
	mock.Mock
}

// CountDocuments provides a mock function with given fields: _a0, _a1
func (_m *CollectionHelper) CountDocuments(_a0 context.Context, _a1 interface{}) (int64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOne provides a mock function with given fields: _a0, _a1
func (_m *CollectionHelper) DeleteOne(_a0 context.Context, _a1 interface{}) (interface{}, error) {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: _a0, _a1, _a2
func (_m *CollectionHelper) Find(_a0 context.Context, _a1 interface{}, _a2 database.MongoOption) (database.CursorResultHelper, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 database.CursorResultHelper
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, database.MongoOption) database.CursorResultHelper); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.CursorResultHelper)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, database.MongoOption) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: _a0, _a1
func (_m *CollectionHelper) FindOne(_a0 context.Context, _a1 interface{}) database.SingleResultHelper {
	ret := _m.Called(_a0, _a1)

	var r0 database.SingleResultHelper
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) database.SingleResultHelper); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.SingleResultHelper)
		}
	}

	return r0
}

// InsertOne provides a mock function with given fields: _a0, _a1
func (_m *CollectionHelper) InsertOne(_a0 context.Context, _a1 interface{}) (interface{}, error) {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOne provides a mock function with given fields: _a0, _a1, _a2
func (_m *CollectionHelper) UpdateOne(_a0 context.Context, _a1 interface{}, _a2 interface{}) (interface{}, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) interface{}); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
