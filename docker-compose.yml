version: '3.8'

services:
  elasticsearch:
    build:
      context: ./elk/elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - ./elk/elasticsearch:/usr/share/elasticsearch/data:z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    # networks:
    #   - elk

  logstash:
    build:
      context: ./elk/logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,z
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro,z
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    # networks:
    #   - elk
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: ./elk/kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,z
    ports:
      - "5601:5601"
    # networks:
    #   - elk
    depends_on:
      - elasticsearch

  kong-database:
    image: postgres:12-alpine
    container_name: kong-database
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kong
    volumes:
      - ./pg_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrations:
    depends_on:
      - kong-database
    image: kong
    container_name: kong-migrations
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_DATABASE=kong
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
    command: kong migrations bootstrap -v

  kong:
    depends_on:
      - kong-database
    image: kong
    container_name: kong
    restart: always
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_DATABASE=kong
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_PROXY_LISTEN=0.0.0.0:8000, 0.0.0.0:8443 ssl http2
      - KONG_NGINX_HTTP_RESOLVER=8.8.8.8
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_TRUSTED_IPS=0.0.0.0/0,::/0
      - KONG_REAL_IP_RECURSIVE=on
    ports:
      - 80:8000
      - 443:8443 
      - 127.0.0.1:8001:8001
    healthcheck:
      test: ["CMD", "wget", "-O-", "http://127.0.0.1:8001/status"]
      interval: 5s
      timeout: 2s
      retries: 15

  mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    container_name: mongo
    volumes:
      - ./mongo_data:/data/db

  konga:
    image: pantsel/konga
    container_name: konga
    restart: always
    environment:
      DB_ADAPTER: mongo
      DB_HOST: mongo
    depends_on:
      - mongo
    ports:
      - 127.0.0.1:1337:1337
  
  user: 
    build: 
      context: ./user
      dockerfile: Dockerfile
    ports:
      - 8081:8080
    environment:
      APP_PORT: :8080
      MONGODB_ENDPOINT: mongodb://mongo:27017
      MONGODB_NAME: movie-booking
      MONGODB_COLLECTION: user
      JWT_SECRET: 'ffsdlfk#sd/'
      GRPC_HOST: :5000
      PHOTO_URL: http://media:9000/media/upload
    depends_on:
      - mongo
  
  cinema: 
    build: 
      context: ./cinema
      dockerfile: Dockerfile
    ports:
      - 8082:8080
    environment:
      APP_PORT: :8080
      MONGODB_ENDPOINT: mongodb://mongo:27017
      MONGODB_NAME: movie-booking
      MONGODB_COLLECTION: cinema
      GRPC_HOST: :5001
      GRPC_AUTH_HOST: user:5000
      PHOTO_URL: http://media:9000/media/upload
    depends_on:
      - mongo
      - user
  
  movie: 
    build: 
      context: ./movie/
      dockerfile: Dockerfile
    ports:
      - 8083:8080
    environment:
      APP_PORT: :8080
      MONGODB_ENDPOINT: mongodb://mongo:27017
      MONGODB_NAME: movie-booking
      MONGODB_COLLECTION: movie
      GRPC_AUTH_HOST: user:5000
      PHOTO_URL: http://media:9000/media/upload
    depends_on:
      - mongo
      - user
  
  reservation: 
    build: 
      context: ./reservation/
      dockerfile: Dockerfile
    ports:
      - 8084:8080
    environment:
      APP_PORT: :8080
      APP_URL: :8004/checkin
      MONGODB_ENDPOINT: mongodb://mongo:27017
      MONGODB_NAME: movie-booking
      MONGODB_COLLECTION: reservation
      GRPC_HOST: :5002
      GRPC_AUTH_HOST: user:5000
      GRPC_CINEMA_HOST: cinema:5001
    depends_on:
      - mongo
      - user
      - cinema
  
  showtime: 
    build:
      context: ./showtime/
      dockerfile: Dockerfile
    ports:
      - 8085:8080
    environment:
      APP_PORT: :8080
      MONGODB_ENDPOINT: mongodb://mongo:27017
      MONGODB_NAME: movie-booking
      MONGODB_COLLECTION: showtime
      GRPC_AUTH_HOST: user:5000
    depends_on:
      - mongo
      - user
  
  media:
    build: 
      context: ./media
      dockerfile: Dockerfile
    ports:
      - 9000:9000

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - 8080:3000
    environment:
      REACT_APP_BASE_URL: http://whoisusefor.tk/api


# networks:
#   elk:
#     driver: bridge

# volumes:
#   elasticsearch:
